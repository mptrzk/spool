first class associative data structures seem kinda cool
  - lisp has assoc lists
  - assoc lists are meh
  - hashtables are also meh
  

programming patterns?
	aren't patterns mostly just missing features?
		mostly, but probably not always
			when not?
				the patterns not implemented by Norvig?
				simple structural thingies?
					structural?
						like what sits where in an s-exp

problems of marrying to acyclic data structures
problems of mutability
	can break stuff outside of scope

IDEs
	vim, emacs, wonky stuff
	bloated IDEs

tests
	in language without proofs tests are mostly concerned with making sure that
		the program doesn't do what we wouldn't want it to do
	natural language descriptions before tests
	describe input and output
		in imperative languages - including state

bugs
	tests!!!
	learn from important bugs
		how did I make it?
		how did I find it?
	learn from bugs thay

big bugs
	that thread bug
	big ABC bug
		what?
		how I made it
			trying to be smart before figuring out how ABC really works
		how I found it
	big SnC bug
		calling gc in function that has "Cell" type arguments, which got corrupted
			also because of premature optimization?

small bugs that could've been big
	SnC defs bug
		similar to big SnC bug

just bugs
	ABC off by one
		what?
			allocating when heap full
stumps
	big bugs	

OOP
	associating function with one of it's arguments datatype
		type semantically
		instance syntactically
	object in ontology and grammar 



"it's like real world"
  it's like how you talk about stuff in natural language
		
javaisms
  forcing OOP
  short funcitons
  long names

getters & setters
enforcing encapsulation to walk around it
objects with no data

names should fit the mental context
long names are better if you have to recall from far away
short names are better if you use them many times close by

top-down, bottom-up - pn, rpn

mutability and object persistance
