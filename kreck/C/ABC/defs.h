def_add("~", rread("nil"));
def_add("t", rread("(~)"));
def_add("args", rread("(< ($))"));
def_add("arg1", rread("(< (< ($)))"));
def_add("arg2", rread("(< (> (< ($))))"));
def_add("arg3", rread("(< (> (> (< ($)))))"));
def_add("funs", rread("(< (> ($)))"));
def_add("fun1", rread("(< funs)"));
def_add("locs", rread("(< (> (> ($))))"));
def_add("loc1", rread("(< locs)"));
def_add("loc2", rread("(< (> locs))"));
def_add("loc3", rread("(< (> (> locs)))"));
def_add("olds", rread("(< (> (> (> ($)))))"));
def_add("rec1", rread("(l fun1 (l fun1))"));
def_add("door", rread("(q ((l (q q) (l arg1))))"));
def_add("gate", rread("(q ((l (q q) (l arg2 (l arg2) arg1))))"));
def_add("gate", rread("(! door (l (q q) (l arg2 (l arg2) arg1)))"));
def_add("foo", rread("(! gate ($) locs)"));
def_add("inc", rread("(! gate nil (? arg1 (? (< arg1) (c (q ~) (rec1 (> arg1))) (c (q t) (> arg1))) (q (t))))"));
def_add("len", rread("(! gate (~) (? arg1 ((l fun1 (l fun1) (inc locs)) (> arg1)) locs))"));
def_add("map", rread("(! gate nil (? arg2 (c (arg1 (< arg2)) (rec1 arg1 (> arg2))) (q ~)))"));
def_add("foldl", rread("(! gate nil (? arg3 (rec1 arg1 (arg1 arg2 (< arg3)) (> arg3)) arg2))"));
def_add("apply", rread("(q ((* (c arg2 (> arg1)) (< arg1))))"));
def_add("any", rread("(! gate nil (? arg1 (? (< arg1) (q t) (rec1 (> arg1))) (q ~)))"));
def_add("all", rread("(! gate nil (? arg1 (? (< arg1) (rec1 (> arg1)) (q ~)) (q t)))"));
def_add("or", rread("(! door (any args))"));
def_add("and", rread("(! door (all args))"));
def_add("not", rread("(q ((? arg1 (q ~) (q t))))"));
def_add("xor2", rread("(q ((and (or arg1 arg2) (not (and arg1 arg2)))))"));
def_add("add", rread("(! gate nil (? arg1 (? arg2 (c (xor2 (< arg1) (< arg2)) (? (and (< arg1) (< arg2)) (rec1 (inc (> arg1)) (> arg2)) (rec1 (> arg1) (> arg2)))) arg1) arg2))"));
def_add("rec-loc", rread("(! door (l (q l) (q fun1) (q (l fun1)) (c (q l) args)))"));
def_add("count", rread("(! gate ((~)) (? arg2 (? (arg1 (< arg2)) ((! rec-loc (inc loc1)) arg1 (> arg2)) ((! rec-loc loc1) arg1 (> arg2))) loc1))"));
def_add("append", rread("(! gate nil (? arg1 (c (< arg1) (rec1 (> arg1) arg2)) arg2))"));
def_add("let", rread("(! door (c (l (q l) (l (q q) arg2) (l (q q) (l arg2)) (l (q q) (l)) (q ($))) arg1))"));
def_add("dec", rread("(! gate nil (? arg1 (? (< arg1) (c (q ~) (> arg1)) (! let ((rec1 (> arg1))) (? arg1 (c (q t) arg1) (q ~)))) (q ~)))"));
def_add("dec", rread("(! gate nil (? arg1 (? (< arg1) (? (> arg1) (c (q ~) (> arg1)) (q ~)) (c (q t) (rec1 (> arg1)))) (q ~)))"));
def_add("subst", rread("(? (=))"));
def_add("qq", rread("(! gate nil (? arg1 (? (= (< arg1) (q uq)) (< (> arg1)) (? (= (< (< arg1)) (q uqs)) (l (q append) (< (> (< arg1))) (rec1 (> arg1))) (l (q c) (rec1 (< arg1)) (rec1 (> arg1))))) (q (q ~))))"));

