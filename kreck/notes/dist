so far


So I wanted to build a programming language
forth
dayvan
pock origins
nock
substitution macros
reluctance to implement sugary ops
problem of defs
	symbols
need for internal system
design considerations
	variable scopes
difference between static & dynamic def resolution
static resolution
dynamic resolution
	why is it cool
		it allows more stuff to be done in kreck
	substitution semantics
	variable semantics
	an example of difference
	naive approach
	the cost of it
getter and substitution semantics
	the tradeoffs
getter semantics
	triple eval power problem
why subst semantics?
	removing dynamic name resolution
	convenient code calling
		it would be (stuff) with getter semantics
		 and it would have to be an inop

