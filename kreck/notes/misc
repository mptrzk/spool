seamless def removal
	static substitution of deterministic defs

notation for pure exops
distilling rh whole pock/kreck deal?

non-rec-fexpr-ctx?

subj layout problems
	single deflist everywhere?
	multiple deflists
		impl will change

inop as an argument in substitutive semantics
	it gets evaluated to a closure when it's an argument
	it gets evalueated again when accessed before application
		no, it doesn't
			arg "getter" gets evaluated
	

^^maybe solutions are more obvious with a type system

maybe I should learn haskell/ats first

problem of different deflists

design is hard


the return/write problem

it's worthless to write it when it evals in the same context where it's expanded
	why?

doing stuff the smart way is doing it defless right away
doing it the way I've been trying to is premature optimization

current plan
	simple stuff, the dumb way
	?monadic? interpreter
	dumbness detection
	everything but less stupid

small deflist contexts

metaprogramming using macros & fexprs

exotic def-add
	expanding
	macro

in pock (~ . stuff) must eval to itself
	why?
		quoting the quote?

so the substitutive semantics aren't substitutive after all?
	they aren't substitutive for 1st member of a call
		rly?
			they are if atoms eval to themselves
	no, it's just that the old pock didn't evaluate stuff

on the island I would write getdef as an inop

(args . ctx)
(args loc . defs)

quote can be an inop!

$<>:*?

*(subj, (inop args)) = *((args . ctx), code)
	where clos = *(subj, inop)
				code = <(clos)
				ctx = >(clos)


subst semantics
	saner arg getter
	detachment from def stuff
		less manipulation

quoted code substitution problem

I want runic hash tables and stuff

improper list function

safety isssue
	1 in (1 2 3) is a valid exop
	exop checking
		do ordered C functions have ordered addresses?
			nah
	exop array and bounds checking?

substitutive semantics, unnamed args

named vs unnamed args
	named
		getvar behaves nicely
			"old" is just (> ($))
				but
					dynamic scoping is rarely used
						how about lets?
							is it dynamic?
					"old" can be a function
		  not needing to mess with the deflist
	unnamed
		eval doesn't mess with names
		args, arg1, etc are all functions

		

proofs
	safety of mutation
	correctness of macro output

implicit fixed point recursion is possible with 2 eval inop, but the closure
must be synthesized before
	the  looks like this:
		(("args" . args) ("rec" code . ctx) . ctx)

dsl for doing things fast

a fun vm
	register
		3 argument regs, result reg, pc, sp, fp
		link register?
	stack
		call stack & ?operation? stack?
		call stack only?
		single stack and link register?


the fundamental slowdown of massively internal language

cool name for operators that work on caller's subj
	are they impossible using 2 eval inop?
		the caller's args
			
against 2-eval inops:
	^^
	literal op is more powerful than symbolized op, which is ugly



minimal version
	$ ' < > : * ? #
	[formal descriptions of exops & inops]
	op getter => inop | exop
	*(subj, inop) = closure = (code . ctx)
	@(closure, args) = *((args . ctx), code) 
	

evlis is redundant for interpreter with 
evlis
list
another fork?

better testing
	always equal?
	showing the result that failed
	READ practical common lisp

against fexpr inops
	losing the subj

very lispy
	subj is an alist
	closure is (code argnames . env)
		argnames and args are pairlis-ed onto env
			problem - low flexibility
	alternative
		(code acode . env)
		acode is arg processing code
			isn't it impossibly self-referential?
	another one
		args get aconsed as "args"
			bindings are done internally

parser doing sym -> (< (@ "sym" ($))?
	yay
		cool
		minimizes number of exops
	nay
		complicated
			that expression must be parsed or hardcoded
				cons(prim.car, cons(cons(prim.assoc, cons(atom("sym"), cons(cons(prim.subj, nil()), nil()))), nil()))
	alt
		getvar exop
			???
				runic name?
				@$
			yay
				simple
			nay
				a bit ugly

eval with current subj op

dyn, but simpler
	parser just translates symbols to (@ key)
	@ is find and eval
		not just find?
			ponder the "too many evals" thing
		(@ key) 
	subj = (args ctx . dict)
	dict is a list of alists
		why not an alist?
			append is meh
				but pairlis?

parser with syms & substitution macros
	how
		submacs begin with #
	nay
		submacs are to be thrown away eventually

let
	generates a inop call
	old args get tucked into env
		figured that out for pock already!
	"olds"
	expands lets inside
		can eval them, with old deflist in olds
problem of nested lets

//
pock?
	syms are parsed as [~ string]
		can be done in kreck aswell as (~ str)
	defs by macro expansion
		macro written using old parser

interpreter with symbols & literals?

interpreter which looks up every atom is probably slower than pock

symbols in pock
going symbolic
	code is an slist, symbol or literal?
		
	same as before but atoms get searched when evaled?

	
literals as just atoms?
	but then lists have to be proper
		isn't code just proper lists anyway?

???
	atoms are evaluated by being searched in subj
	no symbols
	quotes are

dynamic binding & static typing?

"search" fun
	finds a cell whose car is the argument
	would require the subj to be a sexp

symbol as a 2-element list instead of a pair?
	yay
		consistent with pock convention
		easier to read when displayed naively
	nay
		one more pointer dereference
			so what?

"in" function? macro?
env returning functions
	is this monad related stuff?

fast versions with proofs
fast interpreter before a compiler

probably should learn urbity names for stuff

rec is calling stuff "in" current subj

dynamic "method" names?

progn

literals and quote in kreck

OOP like stuff in hoon

let and quote
	not lisp like
		let is kinda another layer
	that's not what I mean by let
		let binds names to stuff evaluated at runtime
		quoted code could end up stupid
			let and quoted closure

symbolic quotation
	symbolic quasiquotation too?

non-symbolic quotation resembles lispy quasiquotation

evaluating data happens almost everywhere, with every inop

does aremhicity make it so that the quote has to be the way it is and not like in lisp?
	in lisp eval is evil
	in aremhic languages itb

aremhicity without dynamism?
	dynamism
		dynamic what?
			typing
			?binding?
				is that "late binding"?

let's think about static macros later
	but "let" must be static

quote as a parsing macro that creates a literal whose value is a stripped expression
	but quote has runtime semantics aswell
		is this ugly?
	but quoted defs should be expanded anyway!
		at least pock/kreck do it like that already
		is Lisp like that?
			yeah, probably using boxed/lazy symbols
			that's what happens when you (eval (quote stuff))

are dynamic macros not feasible?

completely stripped version first

reading pipeline
	parsing into sexps
	macro expansion
	symbol expansion
	stripping

On the island I would've just done the symbol sentinel to avoid the hassle

symbols in lisp

p- n- s- expressions, different layers of internality
	p-exp - cell or nil
	n-exp - cell or atom (which can be a nil or not)
		non-nil atoms are an abstractions of what would be lists in p-world
	s-exp - cell, symbol or literal
		symbols are an abstractions of what would be lists in p-world

problem of symbols in internal environment
	gc?

proper lists & avoiding ambiguity?

is quote a macro?
quote & macroexpand

s-quote?

are macros more difficult now?
	mqq muq muqs?

those are sexps!
	the stuf I've been doing earlier were just trees


proving inambiguity when transforming between parsing domains

on substrings
	origin start end

what seems like a stupid trick
	what?
		before next code packet
		find string lengths
		sum them
		malloc & copy
	meh

externality using metadata
	interning before stripping

internal interning
	or is it external interning?
	metaspace interning
	internal list of mallocs

is dale completely nogc?

kreck in lisp?
seggies are a waste of time
	that's the whole point

infinite loop test with SnC
	it seggies
		it fills up the heap and then does weird stuff
		is it really tail recursive
			it doesn't seggie if gc get's called every loop

separate preprocessing layer? 
	static macro expansion

TODO
	describe different approaches and the levels

		

source alloc problem
	intern strings as a last step of reading

stripping
	optional?

separating levels makes ambiguities impossible
	why?

intern, intern-words as malloc & copy
	I don't want GC to move big pieces of data about

stuff can be parsed to (metadata . stuff) in general
	things like malloc pointers
	which can be collected and stored at some step
		doesn't it lead to ambiguity?

symbols get parsed to a (name . sym_sen)
	why not (name . def) ?
		nil for literals
^^ wouldn't it create ambiguity with pairs?
	no, nil -> (nil . nil)
strings get parsed to (string  . lit_sen)
nums go (num . lit_sen)

using sentinels as literals doesn't break anything, because it becomes (sentinel . sentinel)
what about quotes?
	if the expander doesn't expand quoted stuff, what does it return?
		all this could be avoided it there was no expander and just symbols
	it might expand quoted stuff, it won't matter

symbol sentinels as pairs and possible ambiguity //as pairs on which level? what are the levels?
	it seems like stuff won't break, but symbols would have another meaning than in lisp
		symbols with the same name would not necessarily be eq
			doesn't it kinda happen in lisp when symbols are in different packages?

difference in parsing strings and syms?

definitions are kinda like let*

when are "let" bindings evaluated?

lazy let?

"let" is a preprocessing macro
	it appends new bindings to a symlist and expands the body using it

final code is name invariant


the flow of data when evaluating an expression using an internal system

definitions as threaded lets?

step back and think about the island?
	read the notes
	learn some hoon & haskell
			
constants, variables, identifiers

problem of substrings
	allocating new mem for new substring seems wasteful
		copying them even more so

[to phil?]
problems of wishy-washiness
	usually speed vs sanity

linking dependent definitions
a non-interning parser

concurrent parsing and conflicting symlists

"def" op interpreted by parser?
	yay
	nay
		clusterfuck

the master subject
	symlist

internal parsing
	subject updating?

keeping the old parser?
	needed for bootstrap

symbols can be locally bound aswell

new parser
	str, symlist ->  expr, str' symlist' ?
	stuff:rest symlist -> (assoc symlist stuff word_equal), rest, symlist'
	"stuff" -> string("stuff"); //the other stuff
	n=1A2B3C -> atom(&n, 3);

evaluation
	same as before, but with extra cdr
		rly???

what's opval then?
	opres

opname
opval
opres
	

do symbols really break layer separation?
	it's just a pair!
		is it really?

"noun" vs "a"?
	generic names can be 1 letter
	in opval or parse it should be "noun"
	in "noun_copy", each argument has different purpose
		what?
		contrast with "cons"
	how about when arguments with other types are present
		defadd
			should be value
				maybe even void pointer
		write?
			"a" seems sensible
				it's just a noun

ops with metadata
	it's just one more dereference when done naively
	might make debugging much easier	


using the heap to return pairs?
	yay
		not neading superficial structs
		more similar to the inner code
	nay
		slower
			hardly a problem?

parser that also generates a symlist
	yay
		heap can be smaller
	nay
		finding in list is O(n)
			hash tables can solve
		executable kreck doesn't preserve variable names
			should it?
				it would become lisp with a subject then
					would it be bad?

is interning necessary for internal parser?
	can't do hashes

how about interning using word-sized atoms?
	ugly?

fexpr variant can be made to differ by just one line
with ifdef to switch between them

kreck with
	fexpr inops
		(code . env) = *inop
		*(subj . (inop args)) = *((args . env) . code) //dots
	function inops
		(code . env) = *inop
		*(subj . (inop args)) = *((*/args . env) . code)
		

can internal macro be a fexpr?

macros with same syntax as fns/fexprs?
	I can always all them starting with a "!"
	& call fexprs starting with something else
		but non single char quote would look ugly

malloc as an exop in kreck?

keeping big stuff in the metaspace
	requires the big stuff to have deallocators
	it also requires the language to call the deallocators

counting snc collections in roots?
	only the number in the root with the lowest index matters
	but a program can return the higher root instead
	no, it can't be done


long atoms
	atom is a (sentinel . length) pair
	and the stuff [length] after it
	atoms are printed in hex by default

length in words or bytes?

printing without leading zeros
	find most significant word
	find most significant nibble
	print all significant nibbles


string problem
	parse to symbols?
		but the symbol list must still contain strings
	

making it usable
	repl
	source file reading
	server

internal deflist, internal parser

separating the interpreter from the rest

auras?

[on source edition clutter in C]

exop sets
	basic
		subj
		car
		cdr
		quot
		cons
		cond
		eval
		macro
	wordwise
		ldr
		str
		add
		sub
		mul
		div
		mod
		bit-not
		bit-and
		bit-or
		bit-xor



ops & defs
	another file?

multi-defines, internal defines, is using external deflist internally OK?

exop macros?

exop
	a fexpr...
	it's a fexpr and not a function to allow the ops to be general
inop
	a funcall
		it's funcall not fexp, to make expressions simple
	but don't I want generality from internal stuff also?
		buut that would require explicit evals in the closures
		and another call to put it in the subj
		and it would have to be done almost always, which is ugly
		but isn't it ugly for exops also?
			for inops it's just some calls appended on top of the code
			for exops it's a complicated expression with an eval
				is it really complicated?

an exop

a case for dynamic variable name resolution
		no need for auras
		might make things easier
	but
		shallower metaprogrammability 
			type system becomes external
			building an internal type system becomes ugly

less lispy kreck is simpler kreck
	only atomp
		or wordp
	0 atom is nil

car & cdr of atom & nil
	always error
		yay
		nay
	error for atom, nil for nil
		yay
		nay
	always nil
		yay
		nay


car, cdr, roots

error archtiecture
	error sentinel & log

can it beat forth at the ease of primitive implementation?

C-level DSL in kreck
	
writing kreck interperter in kreck should be easier than in C
	macros

is iterating improper lists easy after all?

nil
	null pointer
		yay
			one less LDR
			simpler iteration
			empty lists look like empty lists when printed naively
			less confusing
				is it?
				[to phil] is this question approachable in a good way?
		nay
			although nils are atoms, they have to be dealt with very differently
			since kreck is untyped, 
	zero atom
		yay
			simpler predicates
		nay
			naive writer writes 0 for an empty list
			type "list of numbers or a number" impossible to define naively
				is that a problem?
	"nil" string pointer
		nay
			cumbersome
	"nil" symbol pointer?
		nay
			cumbersome
	how about version with bound checked atoms?

to define a type naively
	the instance of such type does not have metadata
	pock

		
atoms by pointer comparison?
	yay
		saves heap space
	nay
		possibly slower
			rly?
			it's one more reference to a cell, which may not be cached
				I expect them to be cached, they are used frequently
					for example when iterating over a list
				On archs with a lot of registers such as RISC-V I would
					even expect them to permanently sit in 2 registers
						Would they?
						are compilers smart enough?
						What about arm?
		I want atoms to be gc'd aswell
			"I want everything that I would find in normal lisp code to be GCd"
				strings & symbols
			external memory management for stuff like arithmetic would be a hassle


testing the gc
	examples should include
		trees where many pointers have the same value
		trees containing cells from different frames
	after the cleanup
		all cell pointed to by roots are in the current heap
		the trees are correct
		tree sizes are the same
			
nilfill
tree_size

kreck the wackiest
	what?
		if op is an atom, external fexpr call
		if op is a list, kreck function application
	why not function call atoms?
		The interpreter would be more complicated
		Fexprs generalize nicely
		Eval the fexpr's arguments and you get a function call
		Eval the result and you get a dynamic macro
	why not fexpr call closures then?	
		then it doesn't work as lisp and you'd have to put evals everywhere

[move to C style file?]
secondary return values passed as pointers with names ending in "_ret"
	yay
		I don't like structs as return values, too much clutter
		This way of doing things is ugly too, but oh well
	nay
		but it's confusing!


operator functions take subj and arglist and return flag

why is refcounting slower than snc?
	deallocation with refcounts needs to go through garbage

qemu arm


static locals in asm
	addresses relative to instruction pointer

register machines aren't scary! you can just compile stupid code
that doesn't move stuff between registers

==================================================
OLD


testing for full heap inside gc function body or outside?
	inside
		condition is not duplicated in different functions that use 
			it shouldn't be!!! [unexpected refactor]
	outside

atoms are just address sized numbers
builtins and foreign functions are just atoms
kreck functions are just lists
pock + ldr, str, exe



should arithmetic operations be inner or outer?
what about floats?

should calling outer stuff be explicit?
	yay
		it's dangerous
	nay
		it's done often

interning

design principles
	pock but interacting with the machine

an easy to write natively, deep metaprogramming language

difference from pock
	metacircular evaluator with atomic ops?

write pock first, then do kreck

lispier?
	executing non-reserved atom causes lookup in the list stored at (car subject)
	yay
	nay

wackier?
	how?
		always exec atoms without evaling args
		evaling args must be compiled in the executed code

