isa
	registers
		pc, flags, general purpose

is link register necessary?

link register vs frame pointer
  link register is for where the IP returns to

is "branch with link" a pseudoinstruction?
x:
  mov r1 ip       //r1 = x
  add r1 (y - x)
  b
y:

generic "set register to local label"

set r1 (y - .)
<stuff>
y:


general local lable pseudoinstruction
values of x and y
  at compile time - offsets from the beginning of section
  at run time - memory addreses
  memory addresses
relative values
^^ fixed virtual addresses?

how do absolute jumps work then?



good toy ISA
  no 11-bit stuff

not being smart with registers

abstracting away gp registers
blocks
  data manipulation
    reads -> writes
    preserve frame pointer
      all the time or from start to end?
  control
    branches, frames and the like
    preserve frame data?
instruction pointer ends up after block of instructions

forth words
forth next

procedure call
  push args
  push stack frame
  push link pointer?
  branch and link

reads - globals, locals, constants
writes - globals, locals



C without variable names


forth

understanding:
  next
  branch
  constants

intermixing builtins and words

good VM
  preserves time complexity

orthogonal instruction set

benchmark for machine comparison
  factorial
  use godbolt!
  

machine comparison
  x86
    cisc
    thousands of instructions
    variable length, hard to decode/encode
  6502
    arithmetic works directly on memory addrs
  Z80
    in comparison to 6502
      more registers 
      supposedly less instructions to do a thing
      more variable instruction times
      more instructions?
      [read more!]
    CISC??
  RISC I-IV?
  RISC V
  arm
    looks easier than RISC V
  mips
  powerpc
  lua bytecode
    register based
  C# bytecode
  jvm
    stack based
  clisp vm
  SECD
  MCODE
    "task as:
      stack ptr
      env ptr
      prog ptr"
  lisp machine
  forth machines
  
